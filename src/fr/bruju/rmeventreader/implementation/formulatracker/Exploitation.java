package fr.bruju.rmeventreader.implementation.formulatracker;

import java.io.IOException;
import java.util.Collection;

import fr.bruju.rmeventreader.implementation.formulatracker.contexte.Personnages;
import fr.bruju.rmeventreader.implementation.formulatracker.contexte.personnage.PersonnageReel;

public class Exploitation {

	public void exploiter() {

		Personnages contexte = new Personnages();
		try {
			contexte.lirePersonnagesDansFichier("ressources/formules/Statistiques.txt");
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}
		Collection<PersonnageReel> personnages = contexte.getPersonnages();

		personnages.stream().flatMap(personnage -> personnage.getStatistiques().values().stream())
				.forEach(stat -> System.out
						.println(stat.getPossesseur().getNom() + " " + stat.getNom() + " " + stat.getPosition()));

		/*
		 * 		// Creation du stockage
		Stockage stockage = new Stockage(CreateurPersonnage.creerTousLesPersonnages());
		
		// Attaques Ã  explorer
		File file = new File(RESSOURCES_ATTAQUES);
		
		List<Pair<String, String>> liste = new ArrayList<>();
		
		for (String fichier : file.list()) {
			liste.add(new Pair<>(RESSOURCES_ATTAQUES + fichier, fichier.substring(0, fichier.length() - 4)));
		}
		
		// Remplissage
		stockage.remplir(liste);
		
		// Recuperation des personnages
		List<PersonnageReel> personnages = stockage.getVraiPersonnages();
		
		// Filter des personnages voulus
		List<PersonnageReel> persoAffiches = personnages.stream() //.filter(p -> p.getNom().equals("Ainorie"))
				.collect(Collectors.toList());
		
		// Affichage des formules les concernant
		persoAffiches.stream()
					.forEach(p -> {
						System.out.println("=== " + p.getNom() + " ===");
						stockage.getChaine(p.getNom(), p).stream().forEach(f -> System.out.println(f));
					});
		 * 
		 */

	}

}
