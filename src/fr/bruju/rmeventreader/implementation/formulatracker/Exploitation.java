package fr.bruju.rmeventreader.implementation.formulatracker;

import java.io.IOException;

import fr.bruju.rmeventreader.implementation.formulatracker.actionmaker.FormulaMaker;
import fr.bruju.rmeventreader.implementation.formulatracker.contexte.Attaques;
import fr.bruju.rmeventreader.implementation.formulatracker.contexte.Personnages;
import fr.bruju.rmeventreader.implementation.formulatracker.formule.formule.ConditionVersValeur;
import fr.bruju.rmeventreader.implementation.formulatracker.simplification.inclusion.Incluseur;
import fr.bruju.rmeventreader.implementation.monsterlist.autotraitement.AutoActionMaker;

public class Exploitation {

	public void exploiter() {

		Personnages contexte = new Personnages();
		try {
			contexte.lirePersonnagesDansFichier("ressources/formules/Statistiques.txt");
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}
		
		Attaques attaques = new Attaques();
		attaques.ajouterRepertoire("ressources/attaques/");
		
		
		attaques.getAttaques().stream().forEach(attaque -> {
			FormulaMaker formulaMaker = new FormulaMaker(contexte);
			
			new AutoActionMaker(formulaMaker, attaque.getChemin()).faire();
			attaque.attacherResultat(formulaMaker.getResultat());
		});
		
		Incluseur incluseur = new Incluseur();
		
		attaques.getAttaques().stream().forEach(attaque ->
				attaque.attacherResultat(resultat);
				
				);
		
		
		attaques.getAttaques().stream().forEach(attaque -> {
			System.out.println("===" + attaque.getNom() + "===");
			attaque.getResultat().map.forEach((k, v) ->
			v.stream().forEach(formule -> System.out.println(k.getPosition() + " " + 
			
					
					formule.getString()
					
					)));
			
			
		});
		
		
		
		

		/*
		
		// Remplissage
		stockage.remplir(liste);
		
		// Recuperation des personnages
		List<PersonnageReel> personnages = stockage.getVraiPersonnages();
		
		// Filter des personnages voulus
		List<PersonnageReel> persoAffiches = personnages.stream() //.filter(p -> p.getNom().equals("Ainorie"))
				.collect(Collectors.toList());
		
		// Affichage des formules les concernant
		persoAffiches.stream()
					.forEach(p -> {
						System.out.println("=== " + p.getNom() + " ===");
						stockage.getChaine(p.getNom(), p).stream().forEach(f -> System.out.println(f));
					});
		 * 
		 */

	}

}
