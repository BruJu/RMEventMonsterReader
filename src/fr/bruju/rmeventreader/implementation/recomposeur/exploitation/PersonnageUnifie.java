package fr.bruju.rmeventreader.implementation.recomposeur.exploitation;

import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.collections4.BidiMap;
import org.apache.commons.collections4.bidimap.DualHashBidiMap;


/**
 * Représente un ensemble de personnages représenté par un meta personnage
 * @author Bruju
 *
 */
public class PersonnageUnifie implements Personnage {
	/* =================
	 * PERSONNAGE UNIFIE
	 * ================= */
	
	/** Nom du personnage */
	private final String nom;
	/** Liste des personnages représentés */
	private Set<PersonnageReel> personnages;
	/** Liste des statistiques */
	private BidiMap<String, Statistique> statistiques;

	/**
	 * Crée un personnage unifié à partir d'un ensemble de personnages réels
	 * @param personnages L'ensemble des personnages à représenter
	 */
	PersonnageUnifie(Set<PersonnageReel> personnages, BaseDeVariables base) {
		this.personnages = personnages;
		this.nom = deduireNom();
		deduireStatistiques(base);
	}

	/**
	 * Déduit les statistiques nécessaires pour ce meta personnage
	 */
	private void deduireStatistiques(BaseDeVariables base) {
		statistiques = new DualHashBidiMap<>();

		personnages.stream().map(personnageReel -> personnageReel.getStatistiques())
				.flatMap(map -> map.entrySet().stream())
				.forEach(s -> {
					if (!statistiques.containsKey(s.getKey())) {
						statistiques.put(s.getKey(), base.creerStatistique(this, s.getKey(), s.getValue().estPropriete));
					}
				});
	}
	
	/**
	 * Déduit le nom du personnage unifié
	 * @return Le nom du personnage unifié
	 */
	private String deduireNom() {
		StringBuilder sb = new StringBuilder();

		if (commencentTousPar(personnages, "Monstre")) {
			sb.append("Monstre[");

			personnages.stream().map(p -> p.getNom().substring(7, p.getNom().length())).sorted()
					.forEach(numero -> sb.append(numero));

			sb.append("]");
		} else {
			sb.append(personnages.stream().map(p -> p.getNom()).collect(Collectors.joining("/")));
		}
		
		// TODO : Fichier ressource pour les alias
		if (sb.toString().equals("Monstre[123]")) {
			return "Monstre";
		}
		if (sb.toString().equals("Irzyka/Membre2/Membre3/Membre4")) {
			return "Allié";
		}
		if (sb.toString().equals("Membre2/Membre3/Membre4")) {
			return "Allié";
		}

		return sb.toString();
	}
	
	/**
	 * Renvoie vrai si tous les personnages de l'ensemble commencent par le mot début
	 */
	private static boolean commencentTousPar(Set<PersonnageReel> personnages, String debut) {
		for (PersonnageReel personnage : personnages) {
			if (!personnage.getNom().startsWith(debut)) {
				return false;
			}
		}

		return true;
	}

	/* ==========
	 * PERSONNAGE
	 * ========== */
	
	@Override
	public String getNom() {
		return nom;
	}

	@Override
	public BidiMap<String, Statistique> getStatistiques() {
		return this.statistiques;
	}

	@Override
	public Set<PersonnageReel> getPersonnagesReels() {
		return personnages;
	}
}
