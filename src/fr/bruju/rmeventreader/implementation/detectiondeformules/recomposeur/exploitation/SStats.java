package fr.bruju.rmeventreader.implementation.detectiondeformules.recomposeur.exploitation;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import fr.bruju.rmeventreader.implementation.detectiondeformules._personnages.Individu;
import fr.bruju.rmeventreader.implementation.detectiondeformules._personnages.VariablesAssociees;

public class SStats implements VariablesAssociees {
	public final Map<String, Statistique> statistiques;
	private Personnage possesseur;

	
	public SStats(Personnage possesseur) {
		this.possesseur = possesseur;
		statistiques = new HashMap<>();
	}
	

	public SStats(PersonnageUnifie personnageUnifie, BaseDeVariables base) {
		this.possesseur = personnageUnifie;
		statistiques = new HashMap<>();

		personnageUnifie.getPersonnagesReels().stream().map(personnageReel -> personnageReel.getVariablesAssociees().statistiques)
				.flatMap(map -> map.entrySet().stream())
				.forEach(s -> {
					if (!statistiques.containsKey(s.getKey())) {
						statistiques.put(s.getKey(), base.creerStatistique(personnageUnifie, s.getKey(), s.getValue().estPropriete));
					}
				});
	}


	/**
	 * Ajoute une statistique au personnage
	 * 
	 * @param nom Le nom de la statistique
	 * @param position Le num√©ro de sa variable
	 */
	public void addStatistique(Statistique stat) {
		statistiques.put(stat.nom, stat);
	}
	
	
	public String getStatistique(int idVariable) {		
		for (Entry<String, Statistique> paire : statistiques.entrySet()) {
			if (paire.getValue().position == idVariable) {
				return paire.getKey();
			}
		}
		
		return null;
		
	}
	
}
