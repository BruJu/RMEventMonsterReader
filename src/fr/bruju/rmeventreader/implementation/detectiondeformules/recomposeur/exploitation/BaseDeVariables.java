package fr.bruju.rmeventreader.implementation.detectiondeformules.recomposeur.exploitation;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import fr.bruju.rmeventreader.implementation.detectiondeformules._personnages.Groupe;
import fr.bruju.rmeventreader.implementation.detectiondeformules._personnages.Individu;
import fr.bruju.rmeventreader.implementation.detectiondeformules._personnages.Personne;
import fr.bruju.rmeventreader.implementation.detectiondeformules._personnages.VariablesAssociees;
import fr.bruju.rmeventreader.utilitaire.Utilitaire;

import static fr.bruju.rmeventreader.ProjetS.PROJET;

public class BaseDeVariables {
	private int premiereVariableNonAllouee = 10001;

	private Map<Integer, Statistique> statistiquesConnues;

	private Map<String, Individu<StatsRecomposition>> personnagesConnus;
	private Map<Set<Individu<StatsRecomposition>>, Groupe<StatsRecomposition>> unificationsConnues;

	public BaseDeVariables() {
		statistiquesConnues = new HashMap<>();
		unificationsConnues = new HashMap<>();
		personnagesConnus = VariablesAssociees.remplirStatistiques(
				(individu) -> new StatsRecomposition(individu, this));
	}
	
	
	
	public Set<Integer> getVariablesStatistiques() {
		return statistiquesConnues.keySet();
	}
	

	public Groupe<StatsRecomposition> unifierPersonnage(Personne<StatsRecomposition> p1, Personne<StatsRecomposition> p2) {
		Set<Individu<StatsRecomposition>> personnagesReels = new TreeSet<Individu<StatsRecomposition>>();

		personnagesReels.addAll(p1.getIndividus());
		personnagesReels.addAll(p2.getIndividus());

		return Utilitaire.Maps.getX(unificationsConnues, personnagesReels,
				() -> new Groupe<StatsRecomposition>(personnagesReels, p -> new StatsRecomposition(p, this)));
	}

	public Statistique creerStatistique(Groupe<StatsRecomposition> personnageUnifie, String nomStat, boolean estPropriete) {
		Statistique stat = new Statistique(personnageUnifie, nomStat, premiereVariableNonAllouee++, estPropriete);
		statistiquesConnues.put(stat.position, stat);
		return stat;
	}

	public Individu<StatsRecomposition> getPersonnage(String nomLanceur) {
		return personnagesConnus.get(nomLanceur);
	}

	public String getNomParIDHeros(int heros) {
		return PROJET.extraireHeros(heros);
	}

	public String getNomParIDObjet(int objet) {
		return Integer.toString(objet);
	}

	public String getNomVariable(int id) {
		if (statistiquesConnues.containsKey(id)) {
			Statistique a = statistiquesConnues.get(id);
			return a.possesseur.getNom() + "." + a.nom;
		} else {
			if (id <= 5000)
				return "{VAR " + id + ":" + PROJET.extraireVariable(id) + "}";
			else
				return "{SWI " + id + ":" + PROJET.extraireInterrupteur(id-5000) + "}";
		}
	}

	public Statistique getStatistiqueById(Integer variable) {
		return statistiquesConnues.get(variable);
	}



	public void declarerStatistique(int position, Statistique stat) {
		statistiquesConnues.put(position, stat);
	}
}
